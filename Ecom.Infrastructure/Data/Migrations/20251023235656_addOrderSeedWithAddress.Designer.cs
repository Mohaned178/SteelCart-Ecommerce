// <auto-generated />
using System;
using Ecom.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecom.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251023235656_addOrderSeedWithAddress")]
    partial class addOrderSeedWithAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecom.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "29d9dcca-7ccb-4295-acf2-6f0d1f6ae281",
                            City = "Manchester",
                            FirstName = "Erling",
                            LastName = "Haaland",
                            State = "England",
                            Street = "Etihad Stadium Road",
                            ZipCode = "M11 3FF"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "00f772b6-25aa-4385-a3ee-99f60c0e1006",
                            City = "Liverpool",
                            FirstName = "Mohamed",
                            LastName = "Salah",
                            State = "England",
                            Street = "Anfield Road",
                            ZipCode = "L1 4BX"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "f824594d-9cab-433f-b93a-6b80d14c6ca3",
                            City = "Madrid",
                            FirstName = "Luka",
                            LastName = "Modric",
                            State = "Spain",
                            Street = "Santiago Bernabeu Ave",
                            ZipCode = "28022"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "a6f90d83-bdff-48cd-914d-234d9a4dcde8",
                            City = "Barcelona",
                            FirstName = "Robert",
                            LastName = "Lewandowski",
                            State = "Spain",
                            Street = "Camp Nou Street",
                            ZipCode = "08028"
                        });
                });

            modelBuilder.Entity("Ecom.Core.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DispalyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ecom.Core.Entities.Order.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryTime = "3-5 business days",
                            Description = "Fast international shipping with tracking and insurance.",
                            Name = "DHL Express",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 2,
                            DeliveryTime = "2-4 business days",
                            Description = "Reliable worldwide delivery with door-to-door service.",
                            Name = "FedEx Priority",
                            Price = 18.50m
                        },
                        new
                        {
                            Id = 3,
                            DeliveryTime = "5-7 business days",
                            Description = "Affordable local delivery for domestic orders.",
                            Name = "UPS Ground",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 4,
                            DeliveryTime = "4-6 business days",
                            Description = "Trusted shipping in the Middle East and Europe.",
                            Name = "Aramex Standard",
                            Price = 12.75m
                        });
                });

            modelBuilder.Entity("Ecom.Core.Entities.Order.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OrdersId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductItemId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdersId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MainImage = "https://example.com/images/rtx4090.jpg",
                            Price = 2000m,
                            ProductItemId = 1,
                            ProductName = "NVIDIA RTX 4090",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            MainImage = "https://example.com/images/rx7900xt.jpg",
                            Price = 1000m,
                            ProductItemId = 2,
                            ProductName = "AMD Radeon RX 7900 XT",
                            Quantity = 2
                        },
                        new
                        {
                            Id = 3,
                            MainImage = "https://example.com/images/football.jpg",
                            Price = 90m,
                            ProductItemId = 5,
                            ProductName = "Adidas Official Match Football",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            MainImage = "https://example.com/images/shoes.jpg",
                            Price = 150m,
                            ProductItemId = 6,
                            ProductName = "Nike Zoom Running Shoes",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Ecom.Core.Entities.Order.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("deliveryMethodId")
                        .HasColumnType("int");

                    b.Property<int>("shippingAddressId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("deliveryMethodId");

                    b.HasIndex("shippingAddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Order.ShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingAddress");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Product.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All kinds of GPU products",
                            Name = "Graphics Cards"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Gaming and professional laptops",
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Audio devices and gaming headsets",
                            Name = "Headphones"
                        },
                        new
                        {
                            Id = 4,
                            Description = "High-resolution and gaming monitors",
                            Name = "Monitors"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Tools and gear for fitness and sports",
                            Name = "Sports Equipment"
                        });
                });

            modelBuilder.Entity("Ecom.Core.Entities.Product.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            ImageName = "test",
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("Ecom.Core.Entities.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "High-end gaming GPU with 24GB VRAM",
                            Name = "NVIDIA RTX 4090",
                            NewPrice = 2000m,
                            OldPrice = 2200m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Top-tier AMD GPU for 4K gaming",
                            Name = "AMD Radeon RX 7900 XT",
                            NewPrice = 1000m,
                            OldPrice = 1200m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Mid-range GPU offering great performance for 1440p gaming",
                            Name = "NVIDIA RTX 4070 Ti",
                            NewPrice = 799m,
                            OldPrice = 899m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Compact gaming laptop with Ryzen 9 and RTX 4070",
                            Name = "ASUS ROG Zephyrus G14",
                            NewPrice = 1800m,
                            OldPrice = 2000m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "Apple’s professional laptop with M3 chip",
                            Name = "MacBook Pro M3",
                            NewPrice = 2500m,
                            OldPrice = 2700m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Premium ultrabook for creators and professionals",
                            Name = "Dell XPS 15",
                            NewPrice = 1900m,
                            OldPrice = 2100m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "Noise-cancelling wireless headphones",
                            Name = "Sony WH-1000XM5",
                            NewPrice = 350m,
                            OldPrice = 400m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Description = "Gaming headset with dual chamber drivers",
                            Name = "HyperX Cloud Alpha",
                            NewPrice = 120m,
                            OldPrice = 150m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Description = "Wireless earbuds with active noise cancellation",
                            Name = "Apple AirPods Pro 2",
                            NewPrice = 250m,
                            OldPrice = 280m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            Description = "Ultra-wide curved gaming monitor 49-inch",
                            Name = "Samsung Odyssey G9",
                            NewPrice = 1400m,
                            OldPrice = 1600m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            Description = "4K 144Hz gaming monitor with HDR support",
                            Name = "LG Ultragear 27GP950",
                            NewPrice = 800m,
                            OldPrice = 950m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            Description = "27-inch 4K productivity monitor with USB-C",
                            Name = "Dell UltraSharp U2723QE",
                            NewPrice = 650m,
                            OldPrice = 700m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 5,
                            Description = "Lightweight running shoes for all distances",
                            Name = "Nike Air Zoom Pegasus 40",
                            NewPrice = 130m,
                            OldPrice = 160m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            Description = "Professional football boots for firm ground",
                            Name = "Adidas Predator Accuracy",
                            NewPrice = 150m,
                            OldPrice = 180m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            Description = "Official indoor basketball for training and matches",
                            Name = "Wilson Evolution Basketball",
                            NewPrice = 60m,
                            OldPrice = 75m,
                            rating = 0.0
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 5,
                            Description = "High-end badminton racket used by pros",
                            Name = "Yonex Astrox 100ZZ",
                            NewPrice = 220m,
                            OldPrice = 260m,
                            rating = 0.0
                        });
                });

            modelBuilder.Entity("Ecom.Core.Entities.Product.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Review")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecom.Core.Entities.Address", b =>
                {
                    b.HasOne("Ecom.Core.Entities.AppUser", "AppUser")
                        .WithOne("Address")
                        .HasForeignKey("Ecom.Core.Entities.Address", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Order.OrderItem", b =>
                {
                    b.HasOne("Ecom.Core.Entities.Order.Orders", null)
                        .WithMany("orderItems")
                        .HasForeignKey("OrdersId");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Order.Orders", b =>
                {
                    b.HasOne("Ecom.Core.Entities.Order.DeliveryMethod", "deliveryMethod")
                        .WithMany()
                        .HasForeignKey("deliveryMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecom.Core.Entities.Order.ShippingAddress", "shippingAddress")
                        .WithMany()
                        .HasForeignKey("shippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("deliveryMethod");

                    b.Navigation("shippingAddress");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Product.Photo", b =>
                {
                    b.HasOne("Ecom.Core.Entities.Product.Product", null)
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecom.Core.Entities.Product.Product", b =>
                {
                    b.HasOne("Ecom.Core.Entities.Product.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Product.Rating", b =>
                {
                    b.HasOne("Ecom.Core.Entities.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecom.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecom.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecom.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecom.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecom.Core.Entities.AppUser", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecom.Core.Entities.Order.Orders", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Product.Product", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
